{
    "lessons": [
        {
            "lessonTitle": "Introduction to SQL",
            "questions": [
                {
                    "question": "What does SQL stand for?",
                    "options": [
                        "Structured Query Language",
                        "Simple Query Language",
                        "Standard Query Language",
                        "Sequential Query Language"
                    ],
                    "correctAnswer": "Structured Query Language"
                },
                {
                    "question": "Which SQL statement is used to retrieve data?",
                    "options": [
                        "GET",
                        "SELECT",
                        "FETCH",
                        "RETRIEVE"
                    ],
                    "correctAnswer": "SELECT"
                },
                {
                    "question": "What is a primary key?",
                    "options": [
                        "A unique identifier for a record",
                        "A type of index",
                        "A foreign key",
                        "A field for comments"
                    ],
                    "correctAnswer": "A unique identifier for a record"
                },
                {
                    "question": "Which of the following is a DML command?",
                    "options": [
                        "CREATE",
                        "SELECT",
                        "ALTER",
                        "DROP"
                    ],
                    "correctAnswer": "SELECT"
                },
                {
                    "question": "What is the purpose of a foreign key?",
                    "options": [
                        "To create relationships between tables",
                        "To enforce data integrity",
                        "To speed up queries",
                        "Both A and B"
                    ],
                    "correctAnswer": "Both A and B"
                }
            ]
        },
        {
            "lessonTitle": "ANY and ALL in SQL",
            "questions": [
                {
                    "question": "Write an SQL query to find employees from the 'employees' table whose salary is greater than any salary in the 'managers' table.",
                    "code": true,
                    "correctAnswer": "SELECT * FROM employees WHERE salary > ANY (SELECT salary FROM managers);"
                },
                {
                    "question": "Write an SQL query to retrieve the names of employees whose age is less than all ages in the 'executives' table.",
                    "code": true,
                    "correctAnswer": "SELECT name FROM employees WHERE age < ALL (SELECT age FROM executives);"
                },
                {
                    "question": "Write an SQL query to display the names of products from the 'products' table where the price is greater than or equal to any price in the 'discounts' table.",
                    "code": true,
                    "correctAnswer": "SELECT product_name FROM products WHERE price >= ANY (SELECT price FROM discounts);"
                }
            ]
        },
        {
            "lessonTitle": "Operators in SQL",
            "questions": [
                {
                    "question": "Write an SQL query to retrieve all employees from the 'employees' table whose age is between 25 and 35.",
                    "code": true,
                    "correctAnswer": "SELECT * FROM employees WHERE age BETWEEN 25 AND 35;"
                },
                {
                    "question": "Write an SQL query to display the names of employees from the 'employees' table who have 'John' or 'Jane' in their name.",
                    "code": true,
                    "correctAnswer": "SELECT name FROM employees WHERE name LIKE '%John%' OR name LIKE '%Jane%';"
                },
                {
                    "question": "Write an SQL query to find all employees in the 'employees' table whose salary is greater than 5000 and are in the 'IT' department.",
                    "code": true,
                    "correctAnswer": "SELECT * FROM employees WHERE salary > 5000 AND department = 'IT';"
                }
            ]
        },
        {
            "lessonTitle": "Basic SQL Queries",
            "questions": [
                {
                    "question": "Write an SQL query to retrieve the names of all employees from the 'employees' table.",
                    "code": true,
                    "correctAnswer": "SELECT name FROM employees;"
                },
                {
                    "question": "Write an SQL query to display all columns from the 'employees' table where the age is greater than 30.",
                    "code": true,
                    "correctAnswer": "SELECT * FROM employees WHERE age > 30;"
                },
                {
                    "question": "Write an SQL query to sort the 'employees' table by 'salary' in ascending order.",
                    "code": true,
                    "correctAnswer": "SELECT * FROM employees ORDER BY salary ASC;"
                }
            ]
        },
        {
            "lessonTitle": "UNION in SQL",
            "questions": [
                {
                    "question": "Write an SQL query to retrieve the names of all employees from the 'employees' table and the 'managers' table, ensuring no duplicate names are included in the result.",
                    "code": true,
                    "correctAnswer": "SELECT name FROM employees\nUNION\nSELECT name FROM managers;"
                },
                {
                    "question": "Write an SQL query to combine the results of two tables, 'customers_2023' and 'customers_2024', retrieving all customer IDs from both tables, including duplicates.",
                    "code": true,
                    "correctAnswer": "SELECT customer_id FROM customers_2023\nUNION ALL\nSELECT customer_id FROM customers_2024;"
                },
                {
                    "question": "Write an SQL query to list all product names from the 'products_us' table and the 'products_eu' table, ensuring no duplicates in the final result.",
                    "code": true,
                    "correctAnswer": "SELECT product_name FROM products_us\nUNION\nSELECT product_name FROM products_eu;"
                }
            ]
        },
        {
            "lessonTitle": "Data Manipulation in SQL",
            "questions": [
                {
                    "question": "Write an SQL query to update the salary of an employee with ID 101 to 7500.",
                    "code": true,
                    "correctAnswer": "UPDATE employees SET salary = 7500 WHERE id = 101;"
                },
                {
                    "question": "Write an SQL query to delete all employees from the 'employees' table who are older than 60.",
                    "code": true,
                    "correctAnswer": "DELETE FROM employees WHERE age > 60;"
                },
                {
                    "question": "Write an SQL query to insert a new employee record into the 'employees' table.",
                    "code": true,
                    "correctAnswer": "INSERT INTO employees (id, name, age, salary) VALUES (102, 'John Doe', 29, 5000);"
                }
            ]
        },
        {
            "lessonTitle": "SQL Wildcards",
            "questions": [
                {
                    "question": "Write an SQL query to retrieve all customer names from the 'customers' table that start with the letter 'A'.",
                    "code": true,
                    "correctAnswer": "SELECT name FROM customers WHERE name LIKE 'A%';"
                },
                {
                    "question": "Write an SQL query to find all products in the 'products' table where the product name contains the word 'phone' (case-insensitive).",
                    "code": true,
                    "correctAnswer": "SELECT product_name FROM products WHERE product_name LIKE '%phone%';"
                },
                {
                    "question": "Write an SQL query to display the names of employees from the 'employees' table whose names have exactly five characters.",
                    "code": true,
                    "correctAnswer": "SELECT name FROM employees WHERE name LIKE '_____';"
                }
            ]
        },
        {
            "lessonTitle": "JOIN",
            "questions": [
              {
                "question": "Write an SQL query to retrieve the employee names and their corresponding department names from the 'employees' and 'departments' tables. Use an INNER JOIN to match rows where 'employees.department_id' equals 'departments.department_id'.",
                "code": true,
                "correctAnswer": "SELECT employees.name AS employee_name, departments.name AS department_name\nFROM employees\nINNER JOIN departments ON employees.department_id = departments.department_id;"
              },
              {
                "question": "Write an SQL query to retrieve all customers' names from the 'customers' table and their corresponding orders from the 'orders' table. Include customers who have not made any orders using a LEFT JOIN.",
                "code": true,
                "correctAnswer": "SELECT customers.name AS customer_name, orders.order_id AS order_id\nFROM customers\nLEFT JOIN orders ON customers.customer_id = orders.customer_id;"
              },
              {
                "question": "Write an SQL query to retrieve the names of all products from the 'products' table and the names of their suppliers from the 'suppliers' table. Include suppliers who do not supply any products using a RIGHT JOIN.",
                "code": true,
                "correctAnswer": "SELECT products.product_name, suppliers.supplier_name\nFROM products\nRIGHT JOIN suppliers ON products.supplier_id = suppliers.supplier_id;"
              }
            ]
          },
          
        {
            "lessonTitle": "Working with Joins in SQL",
            "questions": [
                {
                    "question": "Write an SQL query to perform an INNER JOIN between 'employees' and 'departments' on the 'department_id' column.",
                    "code": true,
                    "correctAnswer": "SELECT * FROM employees INNER JOIN departments ON employees.department_id = departments.department_id;"
                },
                {
                    "question": "Write an SQL query to perform a LEFT JOIN between 'employees' and 'projects' on 'employee_id'.",
                    "code": true,
                    "correctAnswer": "SELECT * FROM employees LEFT JOIN projects ON employees.id = projects.employee_id;"
                },
                {
                    "question": "Write an SQL query to perform a FULL OUTER JOIN between 'managers' and 'departments' on 'department_id'.",
                    "code": true,
                    "correctAnswer": "SELECT * FROM managers FULL OUTER JOIN departments ON managers.department_id = departments.department_id;"
                }
            ]
        },
        {
            "lessonTitle": "Using Aggregate Functions in SQL",
            "questions": [
                {
                    "question": "Write an SQL query to calculate the average salary of employees in the 'employees' table.",
                    "code": true,
                    "correctAnswer": "SELECT AVG(salary) FROM employees;"
                },
                {
                    "question": "Write an SQL query to find the maximum salary in the 'employees' table.",
                    "code": true,
                    "correctAnswer": "SELECT MAX(salary) FROM employees;"
                },
                {
                    "question": "Write an SQL query to count the number of employees in each department.",
                    "code": true,
                    "correctAnswer": "SELECT department_id, COUNT(*) FROM employees GROUP BY department_id;"
                }
            ]
        },
        {
            "lessonTitle": "SQL Constraints and Data Integrity",
            "questions": [
                {
                    "question": "Which constraint ensures that a column cannot have NULL values?",
                    "options": [
                        "NOT NULL",
                        "UNIQUE",
                        "PRIMARY KEY",
                        "CHECK"
                    ],
                    "correctAnswer": "NOT NULL"
                },
                {
                    "question": "What does the UNIQUE constraint ensure?",
                    "options": [
                        "No duplicate values",
                        "No NULL values",
                        "Referential integrity",
                        "Auto increment"
                    ],
                    "correctAnswer": "No duplicate values"
                },
                {
                    "question": "Which constraint is used to link two tables together?",
                    "options": [
                        "FOREIGN KEY",
                        "UNIQUE",
                        "NOT NULL",
                        "CHECK"
                    ],
                    "correctAnswer": "FOREIGN KEY"
                },
                {
                    "question": "What does a PRIMARY KEY constraint do?",
                    "options": [
                        "Uniquely identifies each row",
                        "Prevents NULL values",
                        "Checks condition",
                        "Limits row count"
                    ],
                    "correctAnswer": "Uniquely identifies each row"
                },
                {
                    "question": "What is the purpose of the CHECK constraint?",
                    "options": [
                        "Ensures column value conditions",
                        "Ensures unique rows",
                        "Prevents NULL values",
                        "Creates index"
                    ],
                    "correctAnswer": "Ensures column value conditions"
                }
            ]
        },
        {
            "lessonTitle": "NULL Functions in SQL",
            "questions": [
                {
                    "question": "Write an SQL query to display the names of employees and their salaries. If the salary is NULL, display 'Not Assigned' instead of NULL.",
                    "code": true,
                    "correctAnswer": "SELECT name, \n       COALESCE(salary, 'Not Assigned') AS salary\nFROM employees;"
                },
                {
                    "question": "Write an SQL query to find all records in the 'orders' table where the 'delivery_date' column is NULL.",
                    "code": true,
                    "correctAnswer": "SELECT * FROM orders WHERE delivery_date IS NULL;"
                },
                {
                    "question": "Write an SQL query to display the total sales from the 'sales' table. If a value in the 'amount' column is NULL, treat it as 0 in the total calculation.",
                    "code": true,
                    "correctAnswer": "SELECT SUM(COALESCE(amount, 0)) AS total_sales\nFROM sales;"
                }
            ]
        },
        {
            "lessonTitle": "Creating and Managing Indexes in SQL",
            "questions": [
                {
                    "question": "Write an SQL query to create an index on the 'last_name' column of the 'employees' table.",
                    "code": true,
                    "correctAnswer": "CREATE INDEX idx_last_name ON employees(last_name);"
                },
                {
                    "question": "Write an SQL query to drop an index named 'idx_email' from the 'employees' table.",
                    "code": true,
                    "correctAnswer": "DROP INDEX idx_email ON employees;"
                },
                {
                    "question": "Write an SQL query to create a unique index on the 'email' column of the 'employees' table.",
                    "code": true,
                    "correctAnswer": "CREATE UNIQUE INDEX idx_unique_email ON employees(email);"
                }
            ]
        },
        {
            "lessonTitle": "Optimizing SQL Queries for Performance",
            "questions": [
                {
                    "question": "Which clause can be used to limit the number of rows in a result?",
                    "options": [
                        "LIMIT",
                        "WHERE",
                        "GROUP BY",
                        "ORDER BY"
                    ],
                    "correctAnswer": "LIMIT"
                },
                {
                    "question": "What does EXPLAIN do in SQL?",
                    "options": [
                        "Displays query execution plan",
                        "Optimizes queries",
                        "Shows results",
                        "Counts rows"
                    ],
                    "correctAnswer": "Displays query execution plan"
                },
                {
                    "question": "How can you improve the performance of a JOIN operation?",
                    "options": [
                        "Indexing join columns",
                        "Using subqueries",
                        "Removing WHERE clauses",
                        "Using GROUP BY"
                    ],
                    "correctAnswer": "Indexing join columns"
                },
                {
                    "question": "Which type of subquery can be executed independently?",
                    "options": [
                        "Independent subquery",
                        "Correlated subquery",
                        "Nested subquery",
                        "Self-join"
                    ],
                    "correctAnswer": "Independent subquery"
                },
                {
                    "question": "What does query caching do?",
                    "options": [
                        "Stores query results for faster retrieval",
                        "Deletes old queries",
                        "Improves JOIN performance",
                        "Increases data redundancy"
                    ],
                    "correctAnswer": "Stores query results for faster retrieval"
                }
            ]
        },
        {
            "lessonTitle": "Comments in SQL",
            "questions": [
                {
                    "question": "What symbol is used for single-line comments in SQL?",
                    "options": [
                        "--",
                        "#",
                        "/*",
                        "//"
                    ],
                    "correctAnswer": "--"
                },
                {
                    "question": "What is the syntax for multi-line comments in SQL?",
                    "options": [
                        "/* comment */",
                        "// comment",
                        "# comment",
                        "-- comment"
                    ],
                    "correctAnswer": "/* comment */"
                },
                {
                    "question": "Why are comments used in SQL code?",
                    "options": [
                        "To explain code",
                        "To prevent code from executing",
                        "Both A and B",
                        "To increase performance"
                    ],
                    "correctAnswer": "Both A and B"
                },
                {
                    "question": "Can comments be used to disable SQL statements?",
                    "options": [
                        "Yes",
                        "No",
                        "Only single-line comments",
                        "Only multi-line comments"
                    ],
                    "correctAnswer": "Yes"
                },
                {
                    "question": "What happens to comments during query execution?",
                    "options": [
                        "They are ignored",
                        "They cause an error",
                        "They are executed as part of the query",
                        "They are displayed in results"
                    ],
                    "correctAnswer": "They are ignored"
                }
            ]
        },
        {
            "lessonTitle": "CASE in SQL",
            "questions": [
                {
                    "question": "Write an SQL query to display the employee name and a new column 'Salary_Level' that shows 'High' if the salary is greater than 7000, 'Medium' if it is between 4000 and 7000, and 'Low' if it is less than 4000.",
                    "code": true,
                    "correctAnswer": "SELECT name, \n       CASE \n           WHEN salary > 7000 THEN 'High'\n           WHEN salary BETWEEN 4000 AND 7000 THEN 'Medium'\n           ELSE 'Low'\n       END AS Salary_Level\nFROM employees;"
                },
                {
                    "question": "Write an SQL query to display product names and a new column 'Discounted_Price' where a 10% discount is applied if the price is greater than 100, and no discount is applied otherwise.",
                    "code": true,
                    "correctAnswer": "SELECT product_name, \n       CASE \n           WHEN price > 100 THEN price * 0.9\n           ELSE price\n       END AS Discounted_Price\nFROM products;"
                },
                {
                    "question": "Write an SQL query to show student names and their grades as 'Pass' if their score is 50 or above and 'Fail' otherwise.",
                    "code": true,
                    "correctAnswer": "SELECT student_name, \n       CASE \n           WHEN score >= 50 THEN 'Pass'\n           ELSE 'Fail'\n       END AS Grade\nFROM students;"
                }
            ]
        }
    ]
}